
AVR101.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000009d  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006b  00000000  00000000  00000259  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ba  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002f  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_13>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>

ISR(TIMER1_OVF_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
	PIND |= (1 << PIND2);
  8a:	4a 9a       	sbi	0x09, 2	; 9
}
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <main>:

int main(void)
{
	// LED
	DDRD |= (1 << DDD2);
  96:	52 9a       	sbi	0x0a, 2	; 10
	// LED on
	PORTD |= (1 << PORTD2);
  98:	5a 9a       	sbi	0x0b, 2	; 11

	// clk/256
	TCCR1B |= (1 << CS12);
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	80 83       	st	Z, r24
	// timer enabled
	TIMSK1 |= (1 << TOIE1);
  a4:	ef e6       	ldi	r30, 0x6F	; 111
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	80 83       	st	Z, r24
	
	sei();
  ae:	78 94       	sei
	
	// Switch all off exept timer
	PRR = 0b11110111;
  b0:	87 ef       	ldi	r24, 0xF7	; 247
  b2:	80 93 64 00 	sts	0x0064, r24

	// set sleep mode
	set_sleep_mode(SLEEP_MODE_IDLE);
  b6:	83 b7       	in	r24, 0x33	; 51
  b8:	81 7f       	andi	r24, 0xF1	; 241
  ba:	83 bf       	out	0x33, r24	; 51
	
	while (1)
	{
		sleep_mode();
  bc:	83 b7       	in	r24, 0x33	; 51
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	83 bf       	out	0x33, r24	; 51
  c2:	88 95       	sleep
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	83 bf       	out	0x33, r24	; 51
	}
  ca:	f8 cf       	rjmp	.-16     	; 0xbc <main+0x26>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
